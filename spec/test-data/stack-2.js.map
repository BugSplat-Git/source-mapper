{"version":3,"file":"main.js","mappings":"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","sources":["./projects/my-angular-crasher/src/app/app.component.ts","./projects/my-angular-crasher/src/app/app.component.html","./projects/my-angular-crasher/src/app/app.module.ts","./projects/my-angular-crasher/src/app/my-angular-error-handler.ts","./projects/my-angular-crasher/src/environments/environment.ts","./projects/my-angular-crasher/src/main.ts","./projects/bugsplat-ng/src/lib/bugsplat-response-data.ts","./projects/bugsplat-ng/src/lib/bugsplat-logger.ts","./projects/bugsplat-ng/src/lib/bugsplat-post-event.ts","./projects/bugsplat-ng/src/lib/bugsplat.ts","./projects/bugsplat-ng/src/lib/bugsplat-error-handler.ts","./projects/bugsplat-ng/src/lib/bugsplat.module.ts","./projects/bugsplat-ng/src/public-api.ts","./projects/bugsplat-ng/src/bugsplat-ng.ts"],"sourcesContent":["import { Component, ErrorHandler, OnInit } from '@angular/core';\nimport { BugSplatErrorHandler } from 'bugsplat-ng';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MyAngularErrorHandler } from './my-angular-error-handler';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n  title = 'my-angular-crasher';\n  logEntries: Array<string | undefined> = [];\n  link$!: Observable<Link>;\n\n  readonly links = {\n    home: {\n      href: 'https://bugsplat.com/',\n      text: 'BugSplat',\n    },\n    angular: {\n      href: 'https://docs.bugsplat.com/introduction/getting-started/integrations/web/angular',\n      text: 'Angular',\n    },\n    typescript: {\n      href: 'https://docs.bugsplat.com/introduction/getting-started/integrations/web/angular#source-maps',\n      text: 'TypeScript',\n    },\n  };\n\n  errors = [\n    TypeError('Bug.Splat is not a function'),\n    URIError('Malformed URI sequence'),\n    SyntaxError('Invalid character: \\'@\\''),\n    RangeError('The argument must be between -500 and 500'),\n  ];\n \n\n  private myAngularErrorHandler: BugSplatErrorHandler\n\n  constructor(private errorHandler: ErrorHandler) {\n    this.myAngularErrorHandler = this.errorHandler as MyAngularErrorHandler;\n    \n    const bugsplat = this.myAngularErrorHandler.bugsplat;\n    const database = bugsplat.database;\n    \n    this.link$ = bugsplat.getObservable()\n      .pipe(\n        map((bugSplatEvent) => {\n          // TODO BG test\n          const crashId = bugSplatEvent.responseData.crashId;\n          return {\n            href: `https://app.bugsplat.com/v2/crash?database=${database}&id=${crashId}`,\n            text: `Crash ${crashId} in database ${database}`,\n          };\n        })\n      );\n  }\n\n  ngOnInit(): void {\n    const file = this.createAdditionalFile();\n    this.myAngularErrorHandler.bugsplat.files.push(file);\n  }\n\n  onButtonClick(error: Error): void {\n    this.logEntries.push('BugSplat!');\n    this.logEntries.push(error.message);\n    this.logEntries.push(error.stack);\n    throw error;\n  }\n\n  private createAdditionalFile(): File {\n    const base64data =\n      'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAADAFBMVEUAAACSbQD/AAD/tgiAAABAHRSTlP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AU/cHJQAAAIBJREFUeJydk9EOgCAIRQ3+/5utG0OFdEDnwaac6fRS6wMa9IWWFuhDVbhe+AHj5ohAwKKU5/ePsFPygi6KCNwRgQDYsMkiELAp0bp5TZCCCFbLCXoxDXq9aE6Q5yFiRhmjPFtNkKLiwkoJvmVrApitbn+erGBDOmZxFGyT2Xko3B8VxpwwVaA4AAAAAElFTkSuQmCC';\n    const contentType = 'image/png';\n    const fileName = 'mario.png';\n    const blob = this.base64toBlob(base64data, contentType, 512);\n    return new File([blob], fileName);\n  }\n\n  private base64toBlob(\n    base64Data: string,\n    contentType: string,\n    sliceSize: number\n  ): Blob {\n    const byteCharacters = atob(base64Data);\n    const byteArrays = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      const slice = byteCharacters.slice(offset, offset + sliceSize);\n      const byteNumbers = new Array(slice.length);\n\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      byteArrays.push(new Uint8Array(byteNumbers));\n    }\n\n    return new Blob(byteArrays, { type: contentType });\n  }\n}\n\ninterface Link {\n  text: string;\n  href: string;\n}\n","<div class=\"container\">\n  <a href=\"https://www.bugsplat.com\">\n    <img class=\"logo\" src=\"./assets/bugsplat-logo.png\">\n  </a>\n  <div class=\"content\">\n    <h1>\n      Welcome to {{ title }}!\n    </h1>\n    <p>This is a sample application that demonstrates <a [href]=\"links.home.href\">{{ links.home.text }}</a> error reporting for <a [href]=\"links.angular.href\">{{ links.angular.text }}</a> applications built with JavaScript or <a [href]=\"links.typescript.href\">{{ links.typescript.text }}.</a></p>\n    <div *ngIf=\"link$ | async as link\">\n      <a [href]=\"link.href\" target=\"_blank\" rel=\"noopener\">{{ link.text }}</a>\n    </div>\n    <div class=\"errors\">\n      <h2>Errors</h2>\n      <ng-container *ngFor=\"let err of errors\">\n        <button class=\"error\" (click)=\"onButtonClick(err)\">\n          <h2>{{ err.name }}</h2>\n          <h4>{{ err.message }}</h4>\n        </button>\n      </ng-container>\n    </div>\n  </div>\n</div>\n\n","import { HttpClientModule } from '@angular/common/http';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BugSplatLogger, BugSplatLogLevel, BugSplatModule } from 'bugsplat-ng';\nimport { environment } from 'projects/my-angular-crasher/src/environments/environment';\nimport { AppComponent } from './app.component';\nimport { MyAngularErrorHandler } from './my-angular-error-handler';\n\n//Uncomment this to use the simple error handler\n// @NgModule({\n//   declarations: [\n//     AppComponent\n//   ],\n//   imports: [\n//     BrowserModule,\n//     HttpClientModule,\n//     BugSplatModule.initializeApp(environment.bugsplat)\n//   ],\n//   bootstrap: [AppComponent]\n// })\n// Comment this to use the simple error handler\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    BugSplatModule.initializeApp(environment.bugsplat)\n  ],\n  providers: [\n    {\n      provide: ErrorHandler,\n      useClass: MyAngularErrorHandler\n    },\n    {\n      provide: BugSplatLogger,\n      useValue: new BugSplatLogger(\n        BugSplatLogLevel.info,\n        console\n      )\n    }\n  ],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule { }\n","import { ErrorHandler, Injectable } from '@angular/core';\nimport { BugSplat } from 'bugsplat-ng';\n\n@Injectable()\nexport class MyAngularErrorHandler implements ErrorHandler {\n  constructor(public bugsplat: BugSplat) {\n    this.bugsplat.user = 'Fred';\n    this.bugsplat.email = 'fred@bugsplat.com';\n    this.bugsplat.key = 'Key!';\n  }\n\n  async handleError(error: Error): Promise<void> {\n    return this.bugsplat.post(error, { description: 'Something went wrong!' });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\nconst packageJson = require('../../../../package.json');\n\nexport const environment = {\n  production: false,\n  bugsplat: {\n    database: packageJson.database,\n    application: packageJson.name,\n    version: `${packageJson.version}-dev`\n  }\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n","export class BugSplatResponseData {\n\n    static readonly successDefault = false;\n    static readonly serverTimeDefault = 0;\n    static readonly messageDefault = '';\n    static readonly urlDefault = '';\n    static readonly crashIdDefault = 0;\n\n    static readonly responseCannotBeNull = 'BugSplatResponseData.createFromSuccessResponseObject Error: response cannot be null, undefined, or empty!';\n    static readonly errorCannotBeNull = 'BugSplatResponseData.createFromError Error: error cannot be null, undefined, or empty!';\n\n    constructor(\n        public readonly success: boolean = false,\n        public readonly message: string = '',\n        public readonly currentServerTime: number = 0,\n        public readonly url: string = '',\n        public readonly crashId: number = 0\n    ) { }\n\n    // TODO BG better type\n    static createFromSuccessResponseObject(response: object) {\n        if (!response) {\n            throw new Error(BugSplatResponseData.responseCannotBeNull);\n        }\n\n        const responseAny = response as any;\n        const success = responseAny.status === 'success' ?? this.successDefault;\n        const currentServerTime = responseAny.current_server_time ?? this.serverTimeDefault;\n        const message = responseAny.message ?? this.messageDefault;\n        const url = responseAny.url ?? this.urlDefault;\n        const crashId = responseAny.crash_id ?? this.crashIdDefault;\n\n        return new BugSplatResponseData(success, message, currentServerTime, url, crashId);\n    }\n\n    static createFromError(error: Error) {\n        if (!error) {\n            throw new Error(BugSplatResponseData.errorCannotBeNull);\n        }\n\n        return new BugSplatResponseData(false, error.message);\n    }\n}\n","\nexport enum BugSplatLogLevel {\n    none,\n    error,\n    warn,\n    info,\n    log\n}\n\nexport interface Logger {\n    error(...params: (string | object)[]): void;\n    warn(...params: (string | object)[]): void;\n    info(...params: (string | object)[]): void;\n    log(...params: (string | object)[]): void;\n}\n\nexport class BugSplatLogger {\n\n    static readonly levelCannotBeNull = 'BugSplatLogger Error: level cannot be null or undefined!';\n    static readonly loggerCannotBeNull = 'BugSplatLogger Error: logger cannot be null or undefined!';\n\n    constructor(private level: BugSplatLogLevel = BugSplatLogLevel.error, private logger: Logger = console) {\n        if (this.level === null || this.level === undefined) {\n            throw new Error(BugSplatLogger.levelCannotBeNull)\n        }\n        if (!this.logger) {\n            throw new Error(BugSplatLogger.loggerCannotBeNull);\n        }\n    }\n    error(...params: (string | object)[]): void {\n        if (this.level >= BugSplatLogLevel.error) {\n            this.logger.error(...params);\n        }\n    }\n    warn(...params: (string | object)[]): void {\n        if (this.level >= BugSplatLogLevel.warn) {\n            this.logger.warn(...params);\n        }\n    }\n    info(...params: (string | object)[]): void {\n        if (this.level >= BugSplatLogLevel.info) {\n            this.logger.info(...params);\n        }\n    }\n    log(...params: (string | object)[]): void {\n        if (this.level >= BugSplatLogLevel.log) {\n            this.logger.log(...params);\n        }\n    }\n}","import { BugSplatResponseData } from './bugsplat-response-data';\n\nexport enum BugSplatPostEventType {\n    success,\n    error\n}\n\nexport class BugSplatPostEvent {\n\n    static readonly typeCannotBeNull = 'BugSplatPostEvent Error: type cannot be null, undefined, or empty';\n    static readonly responseDataCannotBeNull = 'BugSplatPostEvent Error: responseData cannot be null, undefined, or empty';\n\n    constructor(public type: BugSplatPostEventType, public responseData: BugSplatResponseData) {\n        if (this.type === null || this.type === undefined) {\n            throw new Error(BugSplatPostEvent.typeCannotBeNull);\n        }\n        if (!this.responseData) {\n            throw new Error(BugSplatPostEvent.responseDataCannotBeNull);\n        }\n    }\n}","import { Injectable, Optional } from '@angular/core';\nimport { BugSplat as BugSplatJs, BugSplatOptions } from 'bugsplat';\nimport { Observable, Subject } from 'rxjs';\nimport { BugSplatLogger } from './bugsplat-logger';\nimport { BugSplatPostEvent, BugSplatPostEventType } from './bugsplat-post-event';\nimport { BugSplatResponseData } from './bugsplat-response-data';\n\n@Injectable()\nexport class BugSplat {\n\n  readonly files: Array<File> = [];\n\n  private bugSplatPostEventSubject = new Subject<BugSplatPostEvent>();\n  private bugsplatPostEventObservable!: Observable<BugSplatPostEvent>;\n\n  constructor(\n    private bugsplatJs: BugSplatJs,\n    @Optional() private logger: BugSplatLogger = new BugSplatLogger(),\n  ) {\n    this.description = '';\n    this.email = '';\n    this.key = '';\n    this.user = '';\n  }\n\n  get database(): string {\n    return this.bugsplatJs.database;\n  }\n\n  get application(): string {\n    return this.bugsplatJs.application;\n  }\n\n  get version(): string {\n    return this.bugsplatJs.version;\n  }\n\n  set description(value: string) {\n    this.bugsplatJs.setDefaultDescription(value);\n  }\n\n  set email(value: string) {\n    this.bugsplatJs.setDefaultEmail(value);\n  }\n\n  set key(value: string) {\n    this.bugsplatJs.setDefaultAppKey(value);\n  }\n\n  set user(value: string) {\n    this.bugsplatJs.setDefaultUser(value);\n  }\n\n  getObservable(): Observable<BugSplatPostEvent> {\n    if (!this.bugsplatPostEventObservable) {\n      this.bugsplatPostEventObservable = this.bugSplatPostEventSubject.asObservable();\n    }\n\n    return this.bugsplatPostEventObservable;\n  }\n\n  async post(error: Error, options: BugSplatOptions = {}): Promise<void> {\n    options = options ?? {};\n\n    // TODO BG move bugsplat-js\n    options.appKey = options.appKey ?? this.key;\n    options.description = options.description ?? this.description;\n    options.email = options.email ?? this.email;\n    options.user = options.user ?? this.user;\n\n    if (!options?.additionalFormDataParams?.length) {\n      options.additionalFormDataParams = [];\n    }\n\n    for (const file of this.files) {\n      options.additionalFormDataParams.push({\n        key: file.name,\n        value: file,\n        options: file.name\n      });\n    }\n\n    // TODO BG move to bugsplat-js\n    this.logger.info('Error caught by BugSplat');\n    this.logger.info('BugSplat POST callstack:', JSON.stringify(error.stack));\n    this.logger.info('BugSplat POST appKey:', options.appKey);\n    this.logger.info('BugSplat POST user:', options.user);\n    this.logger.info('BugSplat POST email:', options.email);\n    this.logger.info('BugSplat POST description:', options.description);\n    for (let i = 0; i < options.additionalFormDataParams.length; i++) {\n      this.logger.info('BugSplat POST additionalFormDataParams[' + i + ']: ' + options.additionalFormDataParams[i].key);\n    }\n\n    const result = await this.bugsplatJs.post(error, options);\n    if (result.error) {\n      const errorResponseData = BugSplatResponseData.createFromError(result.error);\n      const errorEvent = new BugSplatPostEvent(BugSplatPostEventType.error, errorResponseData);\n      this.logger.error('BugSplat POST Error: ' + JSON.stringify(error));\n      this.bugSplatPostEventSubject.next(errorEvent);\n      return;\n    }\n\n    const responseData = BugSplatResponseData.createFromSuccessResponseObject(result.response);\n    const event = new BugSplatPostEvent(BugSplatPostEventType.success, responseData);\n    this.logger.info('BugSplat POST Success: ' + JSON.stringify(result));\n    this.bugSplatPostEventSubject.next(event);\n  }\n}","import { ErrorHandler, Injectable } from '@angular/core';\nimport { BugSplat } from './bugsplat';\n\n@Injectable()\nexport class BugSplatErrorHandler implements ErrorHandler {\n  constructor(public bugsplat: BugSplat) { }\n\n  async handleError(error: Error): Promise<void> {\n    return this.bugsplat.post(error);\n  }\n}","import { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BugSplat as BugSplatJs } from 'bugsplat';\nimport { BugSplat } from './bugsplat';\nimport { BugSplatErrorHandler } from './bugsplat-error-handler';\nimport { BugSplatSettings } from './bugsplat-settings';\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        HttpClientModule\n    ]\n})\nexport class BugSplatModule { \n    static initializeApp(\n        settings: BugSplatSettings\n    ): ModuleWithProviders<BugSplatModule> {\n        return {\n            ngModule: BugSplatModule,\n            providers: [\n                BugSplat,\n                BugSplatErrorHandler,\n                {\n                    provide: BugSplatJs,\n                    useValue: new BugSplatJs(\n                        settings.database,\n                        settings.application,\n                        settings.version\n                    )\n                }\n            ]\n          };\n    }\n}","/*\n * Public API Surface of bugsplat\n */\n\nexport * from './lib/bugsplat-response-data';\nexport * from './lib/bugsplat';\nexport * from './lib/bugsplat.module';\nexport * from './lib/bugsplat-post-event';\nexport * from './lib/bugsplat-logger';\nexport * from './lib/bugsplat-error-handler';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["map","i0","AppComponent","constructor","errorHandler","home","href","text","angular","typescript","TypeError","URIError","SyntaxError","RangeError","myAngularErrorHandler","bugsplat","database","link$","getObservable","pipe","bugSplatEvent","crashId","responseData","ngOnInit","file","createAdditionalFile","files","push","onButtonClick","error","logEntries","message","stack","base64data","contentType","fileName","blob","base64toBlob","File","base64Data","sliceSize","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","Uint8Array","Blob","type","selectors","decls","vars","consts","template","MyAngularErrorHandler","user","email","key","handleError","post","description","factory","BugSplatResponseData","success","currentServerTime","url","createFromSuccessResponseObject","response","Error","responseCannotBeNull","responseAny","status","successDefault","current_server_time","serverTimeDefault","messageDefault","urlDefault","crash_id","crashIdDefault","createFromError","errorCannotBeNull","BugSplatLogLevel","BugSplatLogger","level","logger","console","undefined","levelCannotBeNull","loggerCannotBeNull","params","warn","info","log","BugSplatPostEventType","BugSplatPostEvent","typeCannotBeNull","responseDataCannotBeNull","BugSplat","bugsplatJs","Subject","application","version","value","setDefaultDescription","setDefaultEmail","setDefaultAppKey","setDefaultUser","bugsplatPostEventObservable","bugSplatPostEventSubject","asObservable","options","appKey","additionalFormDataParams","name","JSON","stringify","result","errorResponseData","errorEvent","next","event","i1","Injectable","Optional","BugSplatErrorHandler","i1.BugSplat","BugSplatModule","initializeApp","settings","ngModule","providers","provide","BugSplatJs","useValue","BrowserModule","HttpClientModule","NgModule","args","imports"],"sourceRoot":"webpack:///"}